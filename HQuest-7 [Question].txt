You have a list of n books, and you are given the width and height of every book as (Bi.height,Bi.width) for i=1...n. The books have to be vertically stacked in alphabetical manner (so, you can assume that the list of books [B1, B2, ..., Bn] is already sorted alphabetically) on vertically aligned shelves of width W. Design a backtracking algorithm to pack those books in the optimal manner as described next.

You may have to use multiple shelves. New shelves can be installed on top of the last shelf. The heights of the shelves can be adjusted; specifically, the height of a shelf is always the largest height among the books on that shelf.

You cannot places a bunch of books whose combined width is more than W on a single shelf. If you decide to place a book on a new shelf, the new shelf will be placed at exactly height h above the topmost shelf where h=largest height of the books in the shelf below (assume that the shelves are made of 0-thickness glass sheets). Your task is to minimize the total height of all the shelves.

Suppose the books have the following dimensions:
(3,2),(4,1),(6,3),(2,4),(6,2),(9,1),(2,2),(4,3) and W=5.
Suppose you follow the naive strategy of placing the books one-by-one of a shelf as long as the width permits, else install a new shelf on top.
Then the first shelf will contains books B1,B2 with height=4.
Second shelf will contain B3 with height=6.
Third shelf will contain B4 with height=2.
Fourth shelf will contain B5,B6,B7 with height=9.
Fifth shelf will contain B8 with height=4.
Total height for this strategy is 25.
(corrected minor mistakes in adding the heights)
There could be a better strategy that occupies a smaller shelf height; you algorithm must find the optimal one.

Design and analyse a backtracking algorithm for this task. Your algorithm should return the minimum total height